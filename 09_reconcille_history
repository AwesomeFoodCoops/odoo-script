#! /usr/bin/env python
# -*- encoding: utf-8 -*-
import erppeek
import sys
from config_test import odoo_configuration_user
import datetime
import re

###############################################################################
# Odoo Connection
###############################################################################


def init_openerp(url, login, password, database):
    openerp = erppeek.Client(url)
    uid = openerp.login(login, password=password, database=database)
    user = openerp.ResUsers.browse(uid)
    tz = user.tz
    return openerp, uid, tz

openerp, uid, tz = init_openerp(
    odoo_configuration_user['url'],
    odoo_configuration_user['login'],
    odoo_configuration_user['password'],
    odoo_configuration_user['database'])

##################################################################
##########                  SET LOGGER                  ##########
##################################################################
class Logger(object):
    def __init__(self, filename='Default.log'):
        self.terminal = sys.stdout
        self.log = open(filename, "a")

    def write(self, message):
        self.terminal.write(message)
        self.log.write(message)

log_file = 'log_' + datetime.datetime.now().strftime("%Y-%m-%d %H_%M_%s")+'.log'
print "stdout = ./"+log_file
sys.stdout = Logger(log_file)
print datetime.datetime.now().strftime("%Y-%m-%d %H_%M_%s")

###############################################################################
# Script
###############################################################################

id_journal_CEP = 49
id_journaux_CB0X = [96,95,97,90,91,92]
contact_contract_number = "CONTRAT 8815597     REM 0"
contactless_contract_number = "CONTRAT 8815598     REM 0"
pattern_telecollecte="CB LA LOUVE"

total_ok = 0
plusieurs_possibilites = 0
aucune_possibilite = 0


def delta_day(date, delay_day):
    date_1 = datetime.datetime.strptime(date, "%Y-%m-%d")
    end_date = date_1 + datetime.timedelta(days=delay_day)
    res = end_date.strftime('%Y-%m-%d')
    return res


def already_reconcilled(move_lines):
    for move_line in move_lines :
        if move_line.reconciled:
	    return True
    return False

def reconcile_pos():
    print ">>>>>>> START UPDATING >>>>>>>>>>"
    CB0Xstatements = openerp.AccountBankStatement.browse([('date', '>=', "2017-01-01"),('date', '<', "2017-08-31"),('journal_id', 'in', id_journaux_CB0X)])

    for statement in CB0Xstatements:
        print "Avancement : ", total_ok+plusieurs_possibilites+aucune_possibilite, " / ", len(CB0Xstatements)
        print "       => total_ok", total_ok, "plusieurs_possibilites", plusieurs_possibilites, "aucune_possibilite", aucune_possibilite 
        print "===========================================", statement.name, " / ", statement.date

        if (already_reconcilled(statement.move_line_ids) == True):
            print "    => Une des écritures de ce bank statement est déjà lettrée => abandon"
            continue

        account_id_credit = statement.journal_id.default_credit_account_id.id
        account_id_debit = statement.journal_id.default_debit_account_id.id
        res = trouver_ligne(statement)
        if res != False :
            res_contact, res_contactless = res
            if (res_contact != False):
                move_contact = rapprochement(statement,res_contact,account_id_credit, "CB classique")
                generer_lettrer_frais_bancaires(res_contact,"8815597")
            if (res_contactless != False):
                move_contactless = rapprochement(statement,res_contactless,account_id_credit, "CB sans contact")
                generer_lettrer_frais_bancaires(res_contactless,"8815598")
            lettrage(statement,res_contactless,res_contact,account_id_credit,account_id_debit)
        #exit()

def generer_lettrer_frais_bancaires(statement,contract_number):
    print "     > Rapporchement frais bancaires"
    parse_name = re.compile(u"^CB LA LOUVE          (?P<date>\d{6})$").search(statement.name)
    parse_note = re.compile(u"^CONTRAT "+contract_number+"     REM (?P<rem>\d{5})$").search(statement.note)
    name = "*CB COM LA LOUVE "+parse_name.group('date')
    note = "CONTRAT "+contract_number+" REM "+parse_note.group('rem')
    fees_lines = openerp.AccountBankStatementLine.browse([('name','=',name),('note','=',note),('journal_id','=',id_journal_CEP),('date', '=', statement.date)])
    if len(fees_lines) == 0:
        print "Aucune ligne de frais trouvée pour cette ligne de télécollecte"
        return False
    if len(fees_lines) > 1:
        print "Plusieurs lignes de frais trouvées pour cette ligne de télecollecte"
    fees_line = fees_lines[0]

    move_line_data_credit = {
        'name': 'Frais télécollecte Contrat '+contract_number+" REM "+parse_note.group('rem'),
        'debit': fees_line.amount * -1,
        'credit': 0.0,
        'journal_id': id_journal_CEP,
        'date': fees_line.date,
        'account_id': 506,#correspond au compte 627800 Autres frais et commissions sur prestations de services
    }
    print fees_line.process_reconciliation_wrapper([move_line_data_credit])

def trouver_ligne(statement):
    print "     > Trouver ligne"
    global total_ok
    global plusieurs_possibilites
    global aucune_possibilite

    bsl = openerp.AccountBankStatementLine.browse([('journal_id','=',id_journal_CEP),('date', '>', statement.date), ('date', '<=', delta_day(statement.date,2))])

    contact_lines = []
    contactless_lines = []

    for line in bsl:
#            print line.name, line.note, line.amount, line.name.find(pattern_telecollecte), line.note.find(contact_contract_number), line.note.find(contactless_contract_number)
        if len(line.journal_entry_ids)>0:
            print "Déjà réconciliée"
            continue
        if (line.name.find(pattern_telecollecte)==0 and line.note.find(contact_contract_number)==0):
            contact_lines.append(line)
        if (line.name.find(pattern_telecollecte)==0 and line.note.find(contactless_contract_number)==0):
            contactless_lines.append(line)

    print "nombre de lignes du jour", len(bsl), " / contact_line", len(contact_lines), " / contactless_line", len(contactless_lines)

    res_contact = False
    res_contactless = False

    print "MONTANT CIBLE : ",statement.balance_end_real

    for contact_line in contact_lines :
        for contactless_line in contactless_lines :
#                print "     => ",abs(contactless_line.amount), " + ",abs(contact_line.amount), " = ", abs(contactless_line.amount + contact_line.amount)
            if (abs(contactless_line.amount) + abs(contact_line.amount) == abs(statement.balance_end_real)):
                if ((res_contact == False) and (res_contactless == False)):
                    res_contact = contact_line
                    res_contactless = contactless_line
                else:
                    plusieurs_possibilites = plusieurs_possibilites + 1
                    print "    => Impossible d'appairer, il y a plusieurs possibilités A."
                    return False
    
    for contact_line in contact_lines :
        if abs(contact_line.amount) == abs(statement.balance_end_real):
            if ((res_contact == False) and (res_contactless == False)):
                res_contact = contact_line
                print "ATTENTION : session sans télecollecte CB sans contact"
            else:
                plusieurs_possibilites = plusieurs_possibilites + 1
                print "    => Impossible d'appairer, il y a plusieurs possibilités B."
                return False

    for contactless_line in contactless_lines :
        if abs(contactless_line.amount) == abs(statement.balance_end_real):
            if ((res_contact == False) and (res_contactless == False)):
                res_contactless = contactless_line
                print "ATTENTION : session sans télecollect CB classique"
            else:
                plusieurs_possibilites = plusieurs_possibilites + 1
                print "    => Impossible d'appairer, il y a plusieurs possibilités C."
                return False


    if ((res_contact == False) and (res_contactless == False)):
        aucune_possibilite = aucune_possibilite + 1
        print "    => Impossible de trouver une possibilité : il y a probablement des erreurs dans la ventilation des paiements de cette session de POS."
        return False
    else :
        total_ok = total_ok + 1
        print "    => OK : "
        if (res_contact != False):
            print "             CONTACT : ",res_contact.name, res_contact.note, res_contact.amount
        if (res_contactless != False):
            print "             SANS CONTACT : ",res_contactless.name, res_contactless.note, res_contactless.amount

    return res_contact,res_contactless


def rapprochement(statement,bank_line,account_id_credit,mode):
        print "     > Rapprochement"
        move_line_contact = {
                'name': 'Télecollecte '+mode+' '+statement.journal_id.name+' '+statement.date+' '+statement.name,
                'debit': 0.0,
                'credit': abs(bank_line.amount),
                'journal_id': id_journal_CEP,
                'date': statement.date,
                'account_id': account_id_credit,
                }
        res = bank_line.process_reconciliation_wrapper([move_line_contact])
        print res
        return res


def lettrage(statement,res_contactless,res_contact,account_id_credit,account_id_debit):
        print "     > Lettrage"
        # LETTRER
        line_to_reconcil = []

        for move_line in statement.move_line_ids:
            if move_line.account_id.id == account_id_debit and move_line.id not in line_to_reconcil:
                line_to_reconcil.append(move_line.id)

        # => move_contactless
        if res_contactless != False :
            for move_line in res_contactless.journal_entry_ids[0].line_ids:
                if move_line.account_id.id == account_id_credit and move_line.id not in line_to_reconcil:
                    line_to_reconcil.append(move_line.id)

        # => move_contact
        if res_contact != False :
            for move_line in res_contact.journal_entry_ids[0].line_ids:
                if move_line.account_id.id == account_id_credit and move_line.id not in line_to_reconcil:
                    line_to_reconcil.append(move_line.id)

        print len(line_to_reconcil), line_to_reconcil
        wizard_id = 1
        r = openerp.execute_kw('account.move.line.reconcile', 'trans_rec_reconcile_full', [wizard_id], {'context': {'active_ids': line_to_reconcil}})
        print r


reconcile_pos()
print "\n>>>>>>> DONE >>>>>>>>>>"
